/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Save_H
#define Save_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "save_types.h"

namespace save {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SaveIf {
 public:
  virtual ~SaveIf() {}
  virtual int32_t save_data(const SaveInfo& msg) = 0;
};

class SaveIfFactory {
 public:
  typedef SaveIf Handler;

  virtual ~SaveIfFactory() {}

  virtual SaveIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SaveIf* /* handler */) = 0;
  };

class SaveIfSingletonFactory : virtual public SaveIfFactory {
 public:
  SaveIfSingletonFactory(const ::std::shared_ptr<SaveIf>& iface) : iface_(iface) {}
  virtual ~SaveIfSingletonFactory() {}

  virtual SaveIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(SaveIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<SaveIf> iface_;
};

class SaveNull : virtual public SaveIf {
 public:
  virtual ~SaveNull() {}
  int32_t save_data(const SaveInfo& /* msg */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Save_save_data_args__isset {
  _Save_save_data_args__isset() : msg(false) {}
  bool msg :1;
} _Save_save_data_args__isset;

class Save_save_data_args {
 public:

  Save_save_data_args(const Save_save_data_args&);
  Save_save_data_args& operator=(const Save_save_data_args&);
  Save_save_data_args() noexcept {
  }

  virtual ~Save_save_data_args() noexcept;
  SaveInfo msg;

  _Save_save_data_args__isset __isset;

  void __set_msg(const SaveInfo& val);

  bool operator == (const Save_save_data_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Save_save_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Save_save_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Save_save_data_pargs {
 public:


  virtual ~Save_save_data_pargs() noexcept;
  const SaveInfo* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Save_save_data_result__isset {
  _Save_save_data_result__isset() : success(false) {}
  bool success :1;
} _Save_save_data_result__isset;

class Save_save_data_result {
 public:

  Save_save_data_result(const Save_save_data_result&) noexcept;
  Save_save_data_result& operator=(const Save_save_data_result&) noexcept;
  Save_save_data_result() noexcept
                        : success(0) {
  }

  virtual ~Save_save_data_result() noexcept;
  int32_t success;

  _Save_save_data_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Save_save_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Save_save_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Save_save_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Save_save_data_presult__isset {
  _Save_save_data_presult__isset() : success(false) {}
  bool success :1;
} _Save_save_data_presult__isset;

class Save_save_data_presult {
 public:


  virtual ~Save_save_data_presult() noexcept;
  int32_t* success;

  _Save_save_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SaveClient : virtual public SaveIf {
 public:
  SaveClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SaveClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t save_data(const SaveInfo& msg) override;
  void send_save_data(const SaveInfo& msg);
  int32_t recv_save_data();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SaveProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SaveIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (SaveProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_save_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SaveProcessor(::std::shared_ptr<SaveIf> iface) :
    iface_(iface) {
    processMap_["save_data"] = &SaveProcessor::process_save_data;
  }

  virtual ~SaveProcessor() {}
};

class SaveProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SaveProcessorFactory(const ::std::shared_ptr< SaveIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< SaveIfFactory > handlerFactory_;
};

class SaveMultiface : virtual public SaveIf {
 public:
  SaveMultiface(std::vector<std::shared_ptr<SaveIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SaveMultiface() {}
 protected:
  std::vector<std::shared_ptr<SaveIf> > ifaces_;
  SaveMultiface() {}
  void add(::std::shared_ptr<SaveIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t save_data(const SaveInfo& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->save_data(msg);
    }
    return ifaces_[i]->save_data(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SaveConcurrentClient : virtual public SaveIf {
 public:
  SaveConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SaveConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t save_data(const SaveInfo& msg) override;
  int32_t send_save_data(const SaveInfo& msg);
  int32_t recv_save_data(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
